services:
  database:
      image: mysql:8.0
      container_name: database_container
      env_file:
        - database/.env
      ports:
        - "3306:3306"
      volumes:
        - database_data:/var/lib/mysql
        - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
        - ./database/my.cnf:/etc/mysql/conf.d/my.cnf
      networks:
        - dbtnet
      healthcheck:
        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
        interval: 10s
        timeout: 5s
        retries: 5

  wallet:
    build: 
      context: .
      dockerfile: wallet/Dockerfile
    container_name: wallet_container
    expose:
      - "4000"
    env_file:
      - wallet/.env
    command: ["gunicorn", "-w", "4", "-b", "0.0.0.0:4000", "run:app"]
    depends_on:
      database:
        condition: service_healthy
    networks:
      - dbtnet

  was:
    build: 
      context: .
      dockerfile: was/Dockerfile
    container_name: was_container
    expose:
      - "3000"
    env_file:
      - was/.env
    command: ["node", "app.js"]
    depends_on:
      database:
        condition: service_healthy
    networks:
      - dbtnet

  web:
    build:
      context: .
      dockerfile: web/Dockerfile
    container_name: web_container
    ports:
      - "80:80"
    depends_on:
      - was
    networks:
      - dbtnet


networks:
  dbtnet:

volumes:
  database_data:


# 실행방법
# 1. 프로젝트 루트로 이동
# 2. docker-compose build 입력하여 빌드
# 3. docker-compose up 입력하여 실행
#   ※ 백그라운드 실행은 docker-compose up -d 
#   ※ 백그라운드 실행 시 로그 확인은 docker-compose logs
#   ※ 백그라운드 실행 시 종료는 docker-compose down 혹은 docker desktop에서 프로세스 중지

# 오류가 난다면 각 폴더 .env에 내용이 올바르게 입력되어있는지 확인하세요.